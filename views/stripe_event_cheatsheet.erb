<h1 class="book big center">The Stripe Webhook Event Cheatsheet</h1>

<p class="date">
  <span class="well pull-right">
  Share &nbsp;&nbsp;&nbsp; <%= partial :share_links %>
  </span>
</p>

<p>
  <%= external_link_tag "Stripe", "https://stripe.com" %> has an amazing set of webhooks for your application to listen for.
  Every event that happens on your Stripe account (or an account your application is connected to) blasts events to your webhook receiver.
</p>
<p>
  "But", you ask, "what events fire when?"
  Below you'll find some common scenarios and the events that Stripe will fire at your webhook receiver in response.
  Clicking on any event name will show a full example webhook.
  You can find full descriptions for these events in <%= external_link_tag "Stripe's awesome documentation", "http://stripe.com/docs/api#event_types" %>.
  For more background information on how Stripe processes a charge check out <%= external_link_tag "The Life of a Stripe Charge", "https://www.petekeen.net/life-of-a-stripe-charge" %> and my book <%= external_link_tag "Mastering Modern Payments: Using Stripe with Rails", 'https://www.petekeen.net/mastering-modern-payments' %>.
</p>

<hr>
<%= partial :upsell, show_header: false %>
<hr>

<h2 id="charges">Simple One-off Purchases with Charges <%= partial :event_anchor, anchor: 'charges' %></h2>

<h4 id="1">1. Customer successfully purchases a single one-off item <%= partial :event_anchor, anchor: '1' %></h4>
<p>The simplest possible starting point. A single one-off purchase.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'simple_charge' %></li>
</ul>

<h4 id="2">2. Customer's card is declined <%= partial :event_anchor, anchor: '2' %></h4>
<p>This event also describes other failure modes, like an invalid expiration date or a failed CVC check if you have the option turned on to decline on a failed check.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'charge.failed', describes: 'Charge', example: 'simple_charge_declined' %></li>
</ul>

<h4 id="3">3. Customer successfully purchases and then requests a refund <%= partial :event_anchor, anchor: '3' %></h4>
<p>Typically you'll hit the refund button in Stripe's management interface to generate a refunded event.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'simple_charge' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.refunded', describes: 'Charge', example: 'simple_charge_refunded' %></li>
</ul>

<h4 id="4">4. Create a charge without capturing it, capture later  <%= partial :event_anchor, anchor: '4' %></h4>
<p>
  Normally charges are <em>authorized</em> (check with the bank for available funds) and
  <em>captured</em> (actually request a fund transfer) at the same time. Stripe allows you to
  separate the two events. For example, if you're shipping goods that have a few days of lead
  time you'd want to authorize the charge up front but only capture it when you actually ship.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'authorization' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.captured', describes: 'Charge', example: 'captured' %></li>
</ul>

<h4 id="5">5. Charge then modify description <%= partial :event_anchor, anchor: '5' %></h4>
<p>
  After making a charge you can update the `description` and `metadata` fields to add or alter application-specific information.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'charge_before_modification' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.updated', describes: 'Charge', example: 'charge_after_modification' %></li>
</ul>

<h2 id="disputes">Disputes  <%= partial :event_anchor, anchor: 'disputes' %></h2>

<h4 id="6">6. Customer disputes a charge, you upload evidence <%= partial :event_anchor, anchor: '6' %></h4>
<p>
  Disputes happen. It's just a fact when you're charging people money. Stripe will of course send your application a series
  of webhooks as the dispute process plays out.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'charge.dispute.created', describes: 'Dispute', example: 'dispute_created' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.dispute.updated', describes: 'Dispute', example: 'dispute_updated' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.dispute.closed', describes: 'Dispute', example: 'dispute_closed' %></li>
</ul>

<h2 id="customers">Customers <%= partial :event_anchor, anchor: 'customers' %></h2>

<h4 id="7">7. Create customer and charge them immediately  <%= partial :event_anchor, anchor: '7' %></h4>
<p>This is the same flow as a simple charge with the added benefit of being able to charge the customer again later.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'customer.created', describes: 'Customer', example: 'create_customer' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'customer_charge' %></li>
</ul>

<h4 id="8">8. Create a customer with a plan without a trial <%= partial :event_anchor, anchor: '8' %></h4>
<p>Customer and subscriptions are where Stripe's webhook system really starts to shine. All of these events happen more or less simultaneously when you create a customer object and include the <code>plan_id</code> and <code>card</code> attributes.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'customer.created', describes: 'Customer', example: 'test1_create' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.card.created', describes: 'Card', example: 'test1_add_card' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.subscription.created', describes: 'Subscription', example: 'test1_add_subscription' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.created', describes: 'Invoice', example: 'test1_invoice' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.payment_succeeded', describes: 'Invoice', example: 'test1_invoice_paid' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'test1_charge' %></li>
</ul>

<h4 id="9">9. Create a customer with a plan with a trial <%= partial :event_anchor, anchor: '9' %></h4>
<p>
  Trials let you give a customer a taste of your application before charging them. Stripe will create a $0 invoice and "pay" it when you
  create the subscription, and then later will send you a <code>customer.subscription.trial_will_end</code> three days before creating the
  first real invoice.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'customer.created', describes: 'Customer', example: 'test1_create' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.card.created', describes: 'Card', example: 'test1_add_card' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.subscription.created', describes: 'Subscription', example: 'test1_add_subscription_with_trial' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.created', describes: 'Invoice', example: 'test1_invoice_0' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.payment_succeeded', describes: 'Invoice', example: 'test1_invoice_0_paid' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.subscription.trial_will_end', describes: 'Subscription', example: 'test1_trial_will_end' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.created', describes: 'Invoice', example: 'test1_invoice' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.payment_succeeded', describes: 'Invoice', example: 'test1_invoice_paid' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'test1_charge' %></li>
</ul>

<h4 id="10">10. Create a customer with a plan with a discount, no trial <%= partial :event_anchor, anchor: '10' %></h4>
<p>Discounted subscriptions are essentially the same as a normal subscription with one more event, `customer.discount.created`.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'customer.created', describes: 'Customer', example: 'test3_create' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.card.created', describes: 'Card', example: 'test3_card' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.subscription.created', describes: 'Subscription', example: 'test3_subscribed' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.discount.created', describes: 'Discount', example: 'test3_discount' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.created', describes: 'Invoice', example: 'test3_invoice' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.payment_succeeded', describes: 'Invoice', example: 'test3_invoice_paid' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'test3_charge' %></li>
</ul>

<h4 id="11">11. Invoice charge attempt succeeds <%= partial :event_anchor, anchor: '11' %></h4>
<p>
  The normal course of events with a subscription is that the invoice is paid properly and on time. Stripe will send an `invoice.created`
  event one hour before attempting to pay the invoice, which gives you time to add items to the invoice for balance billing or utility-style
  billing purposes.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'invoice.created', describes: 'Invoice', example: 'test3_invoice' %></li>
  <li><%= partial :stripe_event, event_name: 'invoice.payment_succeeded', describes: 'Invoice', example: 'test3_invoice_paid' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.succeeded', describes: 'Charge', example: 'test3_charge' %></li>
</ul>

<h4 id="12">12. Invoice charge attempt fails <%= partial :event_anchor, anchor: '12' %></h4>
<p>
  When you run a subscription service eventually you'll have customers who cancel their card without telling you.
  When that happens Stripe will send you a series of events. The key event is <code>invoice.payment_failed</code>, the rest just update
  various attributes on the corresponding Subscription and Customer. Stripe will attempt payment three times. After the third failed attempt
  the <code>customer.subscription.updated</code> event will be replaced with a <code>customer.subscription.deleted</code> event.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'invoice.payment_failed', describes: 'Invoice', example: 'test1_invoice_10_failed' %></li>
  <li><%= partial :stripe_event, event_name: 'charge.failed', describes: 'Charge', example: 'test1_charge_10_failed' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.subscription.updated', describes: 'Subscription', example: 'test1_subscription_past_due' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.updated', describes: 'Customer', example: 'test1_invoice_10_customer_updated' %></li>
</ul>
  
<h4 id="13">13. Existing customer, adding invoice items <%= partial :event_anchor, anchor: '13' %></h4>
<p>Adding invoice items for a customer without specifying an invoice will automatically add them to the next month's invoice. Pretty handy for doing usage billing, since you can just roll up the customer's daily usage and build an invoice item for every day.</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'invoiceitem.created', describes: 'Invoice Item', example: 'invoice_item' %></li>
</ul>

<h4 id="14">14. Customer modifies existing card <%= partial :event_anchor, anchor: '14' %></h4>
<p>
  Stripe's Card API lets you update some details about a card without fully adding a new one.
  For example, a customer's address changes or they get a new expiration date.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'customer.card.updated', describes: 'Card', example: 'modify_card' %></li>
</ul>

<h4 id="15">15. Customer changes to a different card <%= partial :event_anchor, anchor: '15' %></h4>
<p>
  Of course if a customer wants to change their card entirely they have that option. This is the set of events that happens
  when you assign to the customer's `card` attribute. The sequence of events is essentially the same if you add a card and
  change their default card manually, just without the delete event.
</p>
<ul>
  <li><%= partial :stripe_event, event_name: 'customer.card.created', describes: 'Card', example: 'add_new_card' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.updated', describes: 'Customer', example: 'change_default_card' %></li>
  <li><%= partial :stripe_event, event_name: 'customer.card.deleted', describes: 'Card', example: 'delete_card' %></li>
</ul>

<hr>
